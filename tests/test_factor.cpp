#include <gtest/gtest.h>
#include "setOptions.hpp"
#include "cli.hpp"
#include <string>
#include <vector>
#include "factor_reader.h"
using namespace std;

/**
 * This test verifies that `apex factor` gives back the same observed covariates as were provided
 */
TEST(FactorTest, CheckCovariatesMatchObservedTest) {
  global_opts::reset();

  string output_prefix = "data/test_output.factor_test_inferred_cov";

  global_opts::set_global_region("");
  global_opts::set_exp_weight(0);
  global_opts::set_max_signals(10);
  global_opts::process_global_opts(
    output_prefix,           // prefix
    false,        // use low mem
    2,            // rsq_buddy
    0.8,          // rsq_prune
    0.05,         // p-value threshold
    1000000,      // window size
    {},           // target genes
    '0',          // ivw method
    false,        // use_ds (dosage)
    false,        // trim gene ids
    0.05,         // stepwise_backward_thresh
    true,         // t_hom
    false,        // t_het
    true,         // t_acat
    true,         // stepwise_marginal_thresh
    false         // write out log p-values
  );

  // factor --no-scale-cov --factors 2 --iter 3 --expression factor-test.bed.gz --cov factor-test.covariates-observed.tsv --prefix blah
  vector<string> args = {
    "--no-scale-cov",
    "--factors", "2",
    "--iter", "3",
    "--expression", "data/factor_test.bed.gz",
    "--cov", "data/factor_test.covariates-observed.tsv",
    "--prefix", output_prefix,
  };
  factor("tests", args.begin(), args.end());

  auto reader_factor_truth = FactorReader("data/factor_test.covariates-inferred.cov.gz");

  // This is the file generated by the test case
  auto reader_factor_test = FactorReader("data/test_output.factor_test_inferred_cov.cov.gz");

  ASSERT_TRUE(reader_factor_truth == reader_factor_test);
}